////////////////////////////////////
/*        15074219 梁丰洲         */
/*          浮点数算术            */
/*  很容易想到在pintos里面的内核实*/
/*现中对浮点数的运算需要自己实现。*/
/*  本实现参考https://mislove.org/teaching/cs5600/fall10/pintos/pintos_7.html*/
/*pq定点格式:                     */

/*基本思想是将整数的最右边的位作为分数来表示。例如，我们可以将有符号的32位整数的最低14位指定为小数位，这样一个整数x表示实数x /（2 ** 14），其中**表示取幂。这被称为17.14定点数表示法，因为在小数点前有17位，在它之后有14位，并且有一个符号位。（6） 17.14格式的数字最多表示（2 ** 31-1）/（2 ** 14）=约的值。131,071.999。

假设我们使用一个pq定点格式，并设f = 2 ** q。根据上面的定义，我们可以通过乘以f来将整数或实数转换为pq格式。例如，以17.14格式，在上面的load_avg计算中使用的分数59/60是59/60 *（2 ** 14）= 16,111（舍入到最接近）。要将定点值转换回整数，除以f。（正常/C中的运算符向零滚动，即将正数和负数向上舍入。要舍入到最接近的值，将f / 2加到正数上，或者将其从负数中减去，然后除）。*/

/*对于加法运算  pq格式能很容易处理*/
/*对于乘法运算  pq格式存在两个问题*/
/*问题1:乘法后的移位问题          */
/*问题2:乘法后的溢出问题          */
/*解决1:通过对结果/f移动2^q位解决 */
/*解决2:通过扩成32位运算结果解决  */
/*eg:((int64_t) x) * y / f        */
/*////////////////////////////////*/

/*转换n为定点：	n * f                                  */
/*转换x为整数（四舍五入）：	x / f                      */
/*转换x为整数（舍入到最近）：(x + f / 2) / f如果x >= 0 */
/*转换x为整数（舍入到最近）：(x - f / 2) / f如果x <= 0 */
/*加法x和y：	x + y                                  */
/*减法y来自x：	x - y                                  */
/*加非定点数x和n：	x + n * f                          */
/*减非定点数n来自x：	x - n * f                              */
/*乘x用y：	((int64_t) x) * y / f                      */
/*乘非定点数x用n：	x * n                                      */
/*除以x通过y：	((int64_t) x) * f / y                  */
/*除非定点数x通过n：	x / n                                  */
/*///////////////////////////////*/

#ifndef MATH_UTILS

#define MATH_UTILS

/* 浮点数修复 */
typedef int float_t;
/* 定义f 移位16 通过<<MU_F  >>MU_F  实现f=2^16 */
#define MU_F 16
/* 转换n为定点 */
#define MU_CONST(N) ((float_t)(N << MU_F))
/* 加法x和y */
#define MU_ADD(X,Y) (X + Y)
/* 加非定点数x和n */
#define MU_ADD_MIX(X,N) (X + (N << MU_F))
/* 减法y来自x */
#define MU_SUB(X,Y) (X - Y)
/* 减非定点数n来自x */
#define MU_SUB_MIX(X,N) (X - (N << MU_F))
/* 乘非定点数x用n */
#define MU_MULT_MIX(X,N) (X * N)
/* 除非定点数x通过n */
#define MU_DIV_MIX(X,N) (X /N)
/* 乘x用y */
#define MU_MULT(X,Y) ((float_t)(((int64_t) X) * Y >> MU_F))
/* 除以x通过y */
#define MU_DIV(X,Y) ((float_t)((((int64_t) X) << MU_F) / Y))
/* 转换x为整数（四舍五入） */
#define MU_INT_PART(X) (X >> MU_F)
/* 转换x为整数（舍入到最近） */
#define MU_ROUND(X) (X >= 0 ? ((X + (1 << (MU_F - 1))) >> MU_F) : ((X - (1 << (MU_F - 1))) >> MU_F))


#endif /* thread/math_utils.h */
